#!/usr/bin/env python3
"""Usage:
  dat init [-p | -w] [<bucket>]
  dat host [<subdir>]
  dat checkout <file>
  dat clone <folder>
  dat clone <bucket> <folder>
  dat [-p] delete
  dat [-d] pull
  dat [-d] push
  dat stash
  dat stash pop
  dat stash pop --hard
  dat [-r] status

host is a special type of init for hosting files that others can access through
a browser.

Arguments:
  bucket     Name of bucket (ex: my-bucket)
  folder     Name of local folder
  subdir     Subdirectory of CloudFormation for hosting
  -d         Dry run?
  -p         Use personal aws profile?
  -r         Check status against remote?
  --hard     Overwrites existing files when popping stash
"""

from docopt import docopt
arg = docopt(__doc__)
import secrets
import string
from dat import *

if arg['init'] | arg['host']:
    # Don't overwrite existing config
    if os.path.isfile('.dat-config'):
        exit(red('Error: .dat-config already exists'))

    # Create id
    if arg['init']:
        if arg['<bucket>'] is None:
            id = os.getcwd().replace(os.environ['HOME'], '').strip('/').replace('/', '.').lower()
        else:
            id = arg['<bucket>']
    else:
        if arg['<subdir>'] is None:
            random = ''.join(secrets.choice(string.ascii_lowercase + string.digits) for _ in range(8))
            id = 'pbreheny.public.web.host/zz' + random
        else:
            id = 'pbreheny.public.web.host/' + arg['<subdir>']
        if not os.path.isfile('.link'):
            open('.link', 'w').write('https://' + id.replace('pbreheny.public.web.host', 'd1ypx1ckp5bo16.cloudfront.net') + '/index.html')

    # Write config file
    f = open('.dat-config', 'w')
    f.write('aws:' + id + '\n')
    if arg['-p']:
        f.write('profile: personal\n')
        print(green('Configured for personal aws bucket: ') + id)
    else:
        print(green('Configured for aws bucket: ') + id)
    f.write('NEVER PUSHED\n')
    f.close()
elif arg['checkout']: dat_checkout(arg['<file>'])
elif arg['clone']: dat_clone(arg['<bucket>'], arg['<folder>'])
elif arg['delete']: dat_delete(arg['-p'])
elif arg['push']: dat_push(arg['-d'])
elif arg['pull']: dat_pull(arg['-d'])
elif arg['stash']:
    if arg['pop']:
        dat_pop(arg['--hard'])
    else:
        dat_stash()
elif arg['status']: dat_status(arg['-r'])
